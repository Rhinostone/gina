#!/usr/bin/env node
'use strict';

var fs      = require('fs');
var net     = require('net');
// `lib` is previously defiened as this file is required by another
var console = lib.logger;// jshint ignore:line

function Cmd(opt, runOffine) {

    var local = {};
    var lib = {};

    var init = function(opt, runOffine) {

        local.port              = opt.port;
        local.debugPort         = opt.debugPort;
        local.debugBrkEnabled   = opt.debugBrkEnabled;
        local.binPath           = opt.binPath;
        local.pack              = opt.pack;
        local.ginaPath          = opt.ginaPath;
        local.homedir           = opt.homedir;
        local.frameworkPath     = opt.frameworkPath;
        local.hostname          = opt.hostname;
        local.hostV4            = opt.hostV4;
        local.mqPort            = opt.mqPort;
        local.port              = opt.port;

        lib = require(local.frameworkPath + "/lib");

        checkIfSettings();

        if ( typeof(runOffine) != 'undefined' && /^true$/i.test(runOffine) ) {
            launchCmd()
        } else {
            launchFramework()
        }
    };


    var launchFramework = function(){

        var framework = net.createServer( function(conn) {//'connection' listener
            //feedback.
            conn.once('end', function() {
                console.debug('[ CLI ] task completed');
                // required to allow regular CMD to exit properly
                conn.end();
            });
            // force exit
            conn.once('exit', function() {
                //console.info('[ CLI ] task forced to exit')
                // required to allow regular CMD to exit properly
                conn.end();
            });

            //Receiving.
            conn.on('data', function(data) {

                var argv = JSON.parse( data.toString() );

                console.debug( '[ FRAMEWORK ] CMD received "'+ argv.join(' ') +'"' );

                argv[0] = process.execPath;
                argv[1] = argv[1] + '/bin/cli';
                //Launch.
                lib.cmd.load({
                    isOnlineCommand : true,
                    ginaPath : local.ginaPath,
                    frameworkPath : local.frameworkPath,
                    pack : local.pack,
                    argv : argv,
                    client : conn,
                    homedir : local.homedir,
                    port : local.port,
                    debugPort : local.debugPort,
                    debugBrkEnabled : local.debugBrkEnabled,
                    hostname : local.hostname,
                    hostV4: local.hostV4,
                    mqPort: local.mqPort
                })
            })
        });


        framework.on('error', function(err) {
            if (err.code === 'EADDRINUSE') {
                if (process.argv[2] == 'framework:start') {
                    var pid = null;
                    var port  = err.port || getEnvVar('GINA_PORT');// jshint ignore:line
                    var procsFile = _(getEnvVar('GINA_HOMEDIR') +'/procs.json', true);// jshint ignore:line
                    if ( new _(procsFile).existsSync() ) {
                        var runningProcs = requireJSON(procsFile);// jshint ignore:line
                        for (let i in runningProcs) {
                            if (runningProcs[i].port == port) {
                                pid = runningProcs[i].pid;
                                break;
                            }
                        }
                    }
                    if (!pid) {
                        console.warn('Framework already running on port`'+ opt.port +'`. Use `gina status` to get the PID to kill.');
                        return;
                    }

                    console.warn('Framework already running on port `'+ opt.port +'`: [ '+ pid+' ]');
                } else {

                }
            } else {
                console.emerg('Could not start framework. ', err.stack)
            }
        });

        framework.listen(local.port, function() { //'listening' listener

            //First time launch.
            lib.cmd.load({
                ginaPath : local.ginaPath,
                frameworkPath : local.frameworkPath,
                pack : local.pack,
                argv : process.argv,
                client : process.stdout,
                isFromFramework : true,
                homedir : local.homedir,
                port : local.port,
                debugPort : local.debugPort,
                debugBrkEnabled : local.debugBrkEnabled,
                hostname: local.hostname,
                hostV4: local.hostV4,
                mqPort: local.mqPort,
                task : {
                    topic : "framework",
                    action : "start"
                }
            })
        })
    };

    var launchCmd = function() {

        var cmd         = process.argv[2].split(':')
            , topic     = cmd[0]
            , action    = cmd[1]
        ;


        lib.cmd.load({
            ginaPath : local.ginaPath,
            frameworkPath : local.frameworkPath,
            pack : local.pack,
            argv : process.argv,
            client : process.stdout,
            isFromFramework : true,
            homedir : local.homedir,
            port: local.port,
            debugPort : local.debugPort,
            debugBrkEnabled : local.debugBrkEnabled,
            hostname: local.hostname,
            hostV4: local.hostV4,
            mqPort: local.mqPort,
            task : {
                topic : topic,
                action : action
            }
        });
    };

    var checkIfSettings = function() {

        var home        = getEnvVar('GINA_HOMEDIR');// jshint ignore:line
        var mainFile    = home + '/main.json';

        if ( !fs.existsSync(mainFile) ) {

            var mainSrc = getEnvVar('GINA_DIR') + '/resources/home/main.json';// jshint ignore:line
            var version = getEnvVar('GINA_VERSION');// jshint ignore:line
            var release = getEnvVar('GINA_SHORT_VERSION');// jshint ignore:line

            try {

                if ( !fs.existsSync(home) ) {
                    fs.mkdirSync(home, '0775')
                }

                var data = require(mainSrc);
                var dic = {
                    'release' : release,
                    'version' : version
                };

                data = whisper(dic, data);// jshint ignore:line

                lib.generator.createFileFromDataSync(data, mainFile)

            } catch (err) {
                console.error(err.stack);
                process.exit(1)
            }
        }

    }

    init(opt, runOffine)
}
module.exports = Cmd;