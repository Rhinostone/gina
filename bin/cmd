#!/usr/bin/env node
'use strict';

var fs      = require('fs');
var net     = require('net');

var console = lib.logger;

function Cmd(opt, runOffine) {

    var local = {};
    var lib = {};
    
    var init = function(opt, runOffine) {
        
        local.port              = opt.port;
        local.debugPort         = opt.debugPort;
        local.debugBrkEnabled   = opt.debugBrkEnabled;
        local.binPath           = opt.binPath;
        local.pack              = opt.pack;
        local.ginaPath          = opt.ginaPath;
        local.homedir           = opt.homedir;
        local.frameworkPath     = opt.frameworkPath;

        lib = require(local.frameworkPath + "/lib");

        checkIfSettings();

        if ( typeof(runOffine) != 'undefined' ) {
            launchCmd()
        } else {
            launchFramework()
        }
    };
    

    var launchFramework = function(){

        var framework = net.createServer( function(conn) {//'connection' listener
            //feedback.
            conn.once('end', function() {
                console.debug('[ CLI ] task completed');
                conn.end();
            });
            // force exit
            conn.once('exit', function() {
                //console.info('[ CLI ] task forced to exit')
                conn.end();
            });

            //Receiving.
            conn.on('data', function(data) {

                var argv = JSON.parse( data.toString() );

                console.debug( 'CMD received "'+ argv.join(' ') +'"' );

                argv[0] = process.execPath;
                argv[1] = argv[1] + '/bin/cli';
                //Launch.
                lib.cmd.load({
                    isOnlineCommand : true,
                    ginaPath : local.ginaPath,
                    frameworkPath : local.frameworkPath,
                    pack : local.pack,
                    argv : argv,
                    client : conn,
                    homedir : local.homedir,
                    debugPort : local.debugPort,
                    debugBrkEnabled : local.debugBrkEnabled
                })
            })
        });


        framework.on('error', function(err) {
            if (err.code === 'EADDRINUSE') {
                if (process.argv[2] == 'framework:start') {
                    var shortVersion = getEnvVar('GINA_SHORT_VERSION')
                        , rundir = require( getEnvVar('GINA_HOMEDIR') +'/'+ shortVersion +'/settings.json').rundir
                        , path = _( rundir +'/gina')
                        , pids = fs.readdirSync( path )
                        , i = 0
                        , str = ''
                        , pid = undefined;

                    while(i< pids.length) {
                        str = fs.readFileSync(_(path +'/'+ pids[i])).toString();
                        if ( str === 'gina' ) {
                            pid = pids[i];
                            break
                        }
                        ++i
                    }
                    console.warn('Framework already running: [ '+ pid+' ]')
                } else {

                }
            } else {
                console.emerg('Could not start framework. ', err.stack)
            }
        });

        framework.listen(local.port, function() { //'listening' listener

            //First time launch.
            lib.cmd.load({
                ginaPath : local.ginaPath,
                frameworkPath : local.frameworkPath,
                pack : local.pack,
                argv : process.argv,
                client : process.stdout,
                isFromFramework : true,
                homedir : local.homedir,
                debugPort : local.debugPort,
                debugBrkEnabled : local.debugBrkEnabled,
                task : {
                    topic : "framework",
                    action : "start"
                }
            })
        })
    };

    var launchCmd = function() {
        
        var cmd         = process.argv[2].split(':')
            , topic     = cmd[0]
            , action    = cmd[1]
        ;

        lib.cmd.load({
            ginaPath : local.ginaPath,
            frameworkPath : local.frameworkPath,
            pack : local.pack,
            argv : process.argv,
            client : process.stdout,
            isFromFramework : true,
            homedir : local.homedir,
            debugPort : local.debugPort,
            debugBrkEnabled : local.debugBrkEnabled,
            task : {
                topic : topic,
                action : action
            }
        })
    };

    var checkIfSettings = function() {

        var home        = getEnvVar('GINA_HOMEDIR')
        var mainFile    = home + '/main.json';

        if ( !fs.existsSync(mainFile) ) {

            var mainSrc = getEnvVar('GINA_DIR') + '/resources/home/main.json';
            var version = getEnvVar('GINA_VERSION');

            var release = getEnvVar('GINA_SHORT_VERSION');//version.split('.').splice(0,2).join(".");

            try {

                if ( !fs.existsSync(home) ) {
                    fs.mkdirSync(home, '0775')
                }

                var data = require(mainSrc);
                var dic = {
                    'release' : release,
                    'version' : version
                };

                data = whisper(dic, data);

                lib.generator.createFileFromDataSync(data, mainFile)

            } catch (err) {
                console.error(err.stack);
                process.exit(1)
            }
        }

    }

    init(opt, runOffine)
};

module.exports = Cmd