#!/usr/bin/env node
'use strict';
/**
 * Mainly used to debug framework CMD lib - default port should be #5858 by default
 * To modify the debug port :
 *
 * $ gina framework:set --debug-port=<your new debug port>
 */
const fs    = require('fs');
const {exec} = require('child_process');
const {execSync}   = require('child_process');
const {spawn}   = require('child_process');
const os    = require('os');

var isWin32 = function() {
    return (os.platform() == 'win32') ? true : false;
}

var argv = process.argv.splice(2);
var argvStr = argv.join(' ');

console.log('running: gina ' + argvStr );

// fetching config
var homeDir = (process.env[(isWin32()) ? 'USERPROFILE' : 'HOME'] );
homeDir += (isWin32()) ? '\\.gina' :  '/.gina';
var mainConf = require(homeDir + ((isWin32()) ? '\\main.json' : '/main.json'));

var version = mainConf.def_framework.split(/\./g);
version = version.splice(0, 2).join('.');

var settings = require(homeDir + ((isWin32()) ? '\\' + version + '\\settings.json' : '/' + version +'/settings.json'));

var debugPort = null;
var params = argvStr.split(/\s+/g);
if ( params.length > 0 ) {
    for (let p = 0, len = params.length; p < len; ++p) {
        if ( /^\-\-port/.test(params[p]) ) {
            setEnvVar('GINA_PORT', ~~params[p].split(/\=/)[1]);// jshint ignore:line
            continue;
        }
        if ( /^\-\-debug(\_|\-)port/.test(params[p]) ) {
            setEnvVar('GINA_DEBUG_PORT', ~~params[p].split(/\=/)[1]);// jshint ignore:line
            continue;
        }
        if ( /^\-\-(inspect|debug)\-gina/.test(params[p]) ) {
            debugPort = ~~params[p].split(/\=/)[1] || null;

            argv.splice(argv.indexOf('--inspect-gina'), 1);
            Array.prototype.splice.call(process.argv, argv.indexOf('--inspect-gina'), 1);
            argvStr = argv.join(' ');
        }
    }
}

// gina default debug port
debugPort = (debugPort != null) ? debugPort : '--inspect-brk=' + settings.debug_port;

// console.debug('OK ? ', 'node ' + debugPort +' '+ __dirname +'/cli ' + argvStr);
// console.debug('\r\nDebugger attached.');
console.log('\nYou should now start debug on port #'+ settings.debug_port +' before doing anything else ...');

var nodeBin         = execSync('which node').toString().trim();
var cliBin          = __dirname + '/cli';

argv.splice(0, 0, debugPort);
argv.splice(1, 0, cliBin);

// console.debug('node ' + debugPort +' '+ __dirname +'/cli ' + argvStr);
// console.debug('debugPort ', debugPort);
// console.debug('argvStr ', argvStr);
// console.debug('argv ', argv);

var child = spawn(nodeBin, argv,
    {
        detached: true
    }
);

// set encoding
child.stdout.setEncoding('utf8');
child.stdout.on('data', function(data) {
    process.stdout.write(data);
});

// when an exception is thrown, it is sent to the client
child.stderr.setEncoding('utf8');
child.stderr.on('data', function(data) {
    process.stdout.write(data)
});
// exit is handle by the parent process