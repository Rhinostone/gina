#!/usr/bin/env node
'use strict';
/**
 * Usage:
 * $ gina <topic>:<task> <arguments>
 * 
 * eg.:
 * Start the server
 * $ gina start
 * or
 * $ gina framework:start
 *  
 * Start & debug the server (only)
 * $ gina start --inspect-gina
 * 
 * Stop the server
 * $ gina stop
 * 
 * Start a bundle
 * $ gina bundle:start demo @myproject
 */
var fs      = require('fs');
const {spawn}   = require('child_process');
const {execSync}   = require('child_process');

function runAsSubProcess() {
    // console.debug('arguments ', Array.from(process.argv));
    // console.debug('Running gina as a sub process');
    var argv    =  Array.from(process.argv);
    var nodeBin = execSync('which node').toString().trim();
    var cliBin  = __dirname + '/cli';
    if ( argv.indexOf('--inspect-gina') > -1 ) {
        cliBin  = __dirname + '/cli-debug';
        argv.splice(argv.indexOf('--inspect-gina'), 1);
        Array.prototype.splice.call(process.argv, argv.indexOf('--inspect-gina'), 1);
    }
    
    argv.splice(0, 0, cliBin);
    // overriding process.argv which is used in `./cli`
    Array.prototype.splice.call(process.argv, 0, 0, nodeBin);
    Array.prototype.splice.call(process.argv, 0, 0, cliBin);
    
    var child = spawn(nodeBin, argv,
        {
            detached: true
        }
    );
    var pid = null;
    child.stdout.setEncoding('utf8');//Set encoding.
    child.stdout.on('data', function(data) {
        // Uncomment if you want all the noise to debug
        process.stdout.write(data);
        
        /**
         * Filter messages from Logger
         */
        
        // Normal case
        if ( new RegExp('Framework ready for connections','gmi').test(data) ) {
            console.info('Gina server started with PID `'+ child.pid +'`');
            process.exit(0);
        }
        
        // If framework is already running        
        if ( new RegExp('Framework already running','gmi').test(data) ) {   
            pid = ''+data.match(/\[\s+\d+\s+\]/)[0].replace(/\[|\]|\s+/g, '');
            console.info('Gina server is already running with PID `'+ pid +'`');
            process.exit(0);
        }
        
        
        return;
    });
    
    //when an exception is thrown, it is sent to the client
    child.stderr.setEncoding('utf8');
    var error = null;
    child.stderr.on('data', function(err) {  
        error = err.toString();
        if (/Debugger listening|Debugger attached|Warning|address already in use/i.test(error)) {
            console.warn(error);
            return process.exit(1);
        }
        console.error(error);
    });
    
    child.on('exit', function(code, signal) {                   
        // handles only signals that cannot be cannot be caught or ignored
        // ref.: `framework/<version>/lib/proc.js`
        if (/(SIGKILL|SIGSTOP)/i.test(signal)) {
            console.emerg('[' + this.pid + '] exiting with signal: ', signal);
            process.exit(0);
        }
    });
}

/**
 * Will spawn gina CLI with its arguments
 * This is done to allow gina to run in background
 * NB.: If you want to use gina as a daemon, do not point to this file
 *      Use `cli` instead
*/
function runCMD() {
    var argv = Array.from(process.argv);
    if ( /^(start|framework:start)$/.test(argv[2]) ) {
        try {
            // Filter args
            process.argv = Array.prototype.splice.call(process.argv, 2);
            runAsSubProcess.apply(null);
            return;
        } catch (cmdErr) {
            throw cmdErr
        }
    }
    // Normal command lines
    var cliBin  = __dirname + '/cli';
    if ( argv.indexOf('--inspect-gina') > -1 ) {
        cliBin  = __dirname + '/cli-debug';
        argv.splice(argv.indexOf('--inspect-gina'), 1);
        Array.prototype.splice.call(process.argv, argv.indexOf('--inspect-gina'), 1);
    }
    require(cliBin);
}

runCMD();